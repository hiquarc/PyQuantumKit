# state_prepare/by_string.py
#    2025/6/17
#    Author: Peixun Long
#    Computing Center, Institute of High Energy Physics, CAS

from pyquantumkit.procedure.generic import apply_gate, derivative

def create_state_by_01pm(q_circuit, statestr : str, qbitlist : list[int]):
    """
    Apply a quantum circuit to create classical state, which is given by a binary string.

        e.g., '01+-' --> q[0]=|0>, q[1]=|1>, q[2]=|+>, q[3]=|->

        q_circuit : applied quantum circuit
        statestr  : the '0'/'1'/'+'/'-' string to describe the state
        qbitlist  : the target qubit array

    -> Return : q_circuit
    """
    if qbitlist is None or len(qbitlist) <= 0:
        raise ValueError('<qbitlist> must be an non-empty list!')
    N = len(qbitlist)
    if len(statestr) != N:
        raise ValueError('the length of <statestr> must match the length of <qbitlist>!')

    for i in range(0, N):
        if statestr[i] not in {'0', '1', '+', '-'}:
            raise ValueError('binstr must be 0/1/+/- string!')
        if statestr[i] == '1':
            apply_gate(q_circuit, 'X', [qbitlist[i]])
        elif statestr[i] == '+':
            apply_gate(q_circuit, 'H', [qbitlist[i]])
        elif statestr[i] == '-':
            apply_gate(q_circuit, 'X', [qbitlist[i]])
            apply_gate(q_circuit, 'H', [qbitlist[i]])
    return q_circuit

def uncompute_state_by_01pm(q_circuit, statestr : str, qbitlist : list[int]):
    return derivative(q_circuit, qbitlist, create_state_by_01pm, False, True, statestr, qbitlist)


def create_state_by_sqgate_str(q_circuit, sqgate_str : str, qbitlist : list[int]):
    """
    Apply a quantum circuit to create state of which each qubit is generated by a single-qubit gate.

        support gate character (case-insensitive): 'I', 'X', 'Y', 'Z', 'S', 'T', 'H'

        e.g., 'HIXYZ' --> apply H gate on q[0], I on q[1], X on q[2], Y on q[3], Z on q[4]

        q_circuit  : applied quantum circuit
        sqgate_str : the string to describe the applied gates
        qbitlist   : the target qubit array

    -> Return : q_circuit
    """
    if qbitlist is None or len(qbitlist) <= 0:
        raise ValueError('<qbitlist> must be an non-empty list!')
    N = len(qbitlist)
    if len(sqgate_str) != N:
        raise ValueError('the length of <sqgate_str> must match the length of <qbitlist>!')

    s = sqgate_str.upper()
    for i in range(0, N):
        if s[i] not in {'I', 'X', 'Y', 'Z', 'S', 'T', 'H'}:
            raise ValueError('Only support I, X, Y, Z, S, T, H gate!')
        apply_gate(q_circuit, s[i], [qbitlist[i]])
    return q_circuit

def uncompute_state_by_sqgate_str(q_circuit, sqgate_str : str, qbitlist : list[int]):
    return derivative(q_circuit, qbitlist, create_state_by_sqgate_str, False, True, sqgate_str, qbitlist)
